/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SalesManagement;

import RootElement.SalesDBConnect;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTextField;
import net.proteanit.sql.DbUtils;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author User
 */
public class PriceModification extends javax.swing.JPanel {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    String id;
    
    public PriceModification() {
        initComponents();
        con = SalesDBConnect.connect();
        
        loadTable();
    }
    
    
    private int dotCount(JTextField jtf)
    {
        int count=0;
        if("".equals(jtf.getText()))
        {
            return 0;
        }
        
        else
        {
            
            for(int i=0; i<=jtf.getText().length()-1;i++)
            {
            if(jtf.getText().charAt(i)=='.')
                count++;
            }
        }
        
         
        return count;
    } 
    
    public void loadTable()
    {
        
        try
        {
            String q1 = "select productID,name,unitPriceLocal,unitPriceForeign from finishedProducts";
            pst = con.prepareStatement(q1);
            rs = pst.executeQuery();
            ProductsTable.setModel(DbUtils.resultSetToTableModel(rs));
        }
        catch(Exception e)
        {
            DisplayMessage.display("Error");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        local = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        export = new javax.swing.JTextField();
        Update = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        pId = new javax.swing.JTextField();
        pName = new javax.swing.JTextField();
        e = new javax.swing.JLabel();
        l = new javax.swing.JLabel();
        Check = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Local Price", "Export Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        ProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsTableMouseClicked(evt);
            }
        });
        ProductsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ProductsTableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(ProductsTable);

        jLabel1.setText("Local Price");

        local.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                localKeyTyped(evt);
            }
        });

        jLabel2.setText("Export Price");

        export.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                exportKeyTyped(evt);
            }
        });

        Update.setText("Update");
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateMouseClicked(evt);
            }
        });
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jLabel3.setText("Choose Product to be Updated");

        jLabel4.setText("Product ID");

        jLabel5.setText("Product Name");

        pId.setEnabled(false);
        pId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pIdActionPerformed(evt);
            }
        });

        pName.setEnabled(false);

        e.setForeground(new java.awt.Color(255, 51, 51));

        l.setForeground(new java.awt.Color(255, 51, 51));

        Check.setText("Check Statistics");
        Check.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CheckMouseClicked(evt);
            }
        });
        Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckActionPerformed(evt);
            }
        });

        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(local, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(export, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Update, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(pId, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(pName, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(e, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(l, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Check, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4))
                                .addGap(27, 27, 27)
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pId, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                                    .addComponent(local))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(export, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel2)
                                    .addComponent(Check, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(pId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(local, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(export, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(l, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Update)
                    .addComponent(Check))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(100, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        double exportPrice=0;
        double localPrice=0;
          
        if(export.getText().isEmpty())
            e.setText("!");
          
        if(local.getText().isEmpty())
            l.setText("!");

         
        if("!".equals(e.getText()) || "!".equals(l.getText()))
        {
            DisplayMessage.display("Invalid Data Entry");
            
            l.setText(" ");
            e.setText(" ");
        }
        
        else
        {
            try
            {
                exportPrice=Double.parseDouble(export.getText());
                localPrice=Double.parseDouble(local.getText());
            
                String q2 = "UPDATE finishedProducts SET unitPriceLocal='"+ localPrice +"',unitPriceForeign='"+ exportPrice +"' where productID='"+ id +"'";

                pst = con.prepareStatement(q2); 
                pst.execute();
                DisplayMessage.display("Prices Updated Successfully");
                
                loadTable();
        
                local.setText("");
                pId.setText("");
                pName.setText("");
                export.setText("");
            }
        
            catch (Exception e)
            {
                DisplayMessage.display("Unable to update prices");
            }
          
        }  
    }//GEN-LAST:event_UpdateActionPerformed

    private void ProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsTableMouseClicked
        int r = ProductsTable.getSelectedRow();
        
        id = ProductsTable.getValueAt(r,0).toString();
        String name = ProductsTable.getValueAt(r,1).toString();
        
        pId.setText(id);
        pName.setText(name);
        local.setText(ProductsTable.getValueAt(r,2).toString());
        export.setText(ProductsTable.getValueAt(r,3).toString());
            
    }//GEN-LAST:event_ProductsTableMouseClicked

    
    
    
    private void pIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pIdActionPerformed

    private void UpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateMouseClicked

    private void localKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_localKeyTyped
        int count = dotCount(local);
        if(count<1)
        {
            if(Character.isDigit(evt.getKeyChar()) || evt.getKeyChar()=='.')
            {

            }
            else
            {
                evt.consume();
            }
               
        }
        else 
        {
            if(Character.isDigit(evt.getKeyChar()))
            {
                
            }
            else
            {
                evt.consume();
            }
        }
    }//GEN-LAST:event_localKeyTyped

    private void exportKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_exportKeyTyped
       
        int count = dotCount(export);
        if(count<1)
        {
            if(Character.isDigit(evt.getKeyChar()) || evt.getKeyChar()=='.')
            {

            }
            else
            {
                evt.consume();
            }
               
        }
        else 
        {
            if(Character.isDigit(evt.getKeyChar()))
            {
                
            }
            else
            {
                evt.consume();
            }
        }
        
    }//GEN-LAST:event_exportKeyTyped

    private void ProductsTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ProductsTableKeyTyped
        if(!Character.isAlphabetic(evt.getKeyChar()) || !Character.isDigit(evt.getKeyChar()))
        {
            evt.consume();
        }
        
    }//GEN-LAST:event_ProductsTableKeyTyped

    private void CheckMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CheckMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_CheckMouseClicked

    private void CheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckActionPerformed
         
        JasperPrint jp;
        Connection conn;
        try {
            con = SalesDBConnect.connect();
        } catch (Exception e) {
           
        }
        String report="src\\Reports\\Product Statistics.jasper";

        
        try {
            jp = JasperFillManager.fillReport(report, null,con);
            JasperViewer.viewReport(jp,false);
        } catch (JRException ex) {
            Logger.getLogger(PriceModification.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_CheckActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Check;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JButton Update;
    private javax.swing.JLabel e;
    private javax.swing.JTextField export;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel l;
    private javax.swing.JTextField local;
    private javax.swing.JTextField pId;
    private javax.swing.JTextField pName;
    // End of variables declaration//GEN-END:variables
}
